/* 
Referencias y documentación.
https://www.w3.org/html/logo/
https://www.w3.org/standards/webdesign/htmlcss.html
https://www.w3.org/TR/css-2020/
https://developer.mozilla.org/es/docs/Web/CSS 
*/

/*
Regla css consta de 2 partes.
1.- Uno o más selectores.
2.- Un bloque de declaraciones.
    
selector, selector2 {
    atributo: valor;
    atributo-mas-de-dos-palabras: otro-valor;
}
*/

/* En CSS puro utilizar este modo de invocación de una hoja de estilos CSS dentro de otra hoja de estilos, 
es una mala práctica debido a que presenta un comportamiento bloqueante a la hora de ser leído por el navegador. */
/* @import url(another-style-sheet.css); Nota: El @import debe ir antes que cualquier código CSS para ser funcional.*/

h1 {
    background-color: #8d64cb;
    color: #ffffff;
}

.header {
    background: black;
    padding: 5px 5px;
    text-align: center;
}

article {
    padding-left: 8px;
    padding-right: 8px;
}

/* 
Selectores básicos:
1.- Elementos HTML     Etiquetas         Nombre etiqueta    No recomendado   
2.- Identificadores    Atributo id       #                  No recomendado 
3.- Clases             Atributo class    .                  Recomendado 
*/

/* El riesgo de usar una etiqueta como selector es que puede que añada estilos
a un elemento que realmente no los necesita. Evitar en lo posible su uso. */
p {
    color: midnightblue;
}

/* Usar como selector un identificador es un antipatrón, una de las ventajas que no puede ofrecer CSS
es su  capacidad de reutilizar código, usar Id desaprovecha esa opción. Evitar en lo posible su uso. */
#parrafo-dos {
    background-color: skyblue;
}

/* Elegir como nombres de clase algo autodescriptivo en relación al estilo que añade. */
/* Nota: Si ordeno el código alfabeticamente en base al selector, resultará más fácil encontrar una regla determinada. */
.bg-skyblue {
    background-color: skyblue;
}

.bg-steelblue {
    background-color: steelblue;
}

.text-32 {
    font-size: 32px;
}

.text-20 {
    font-size: 20px;
}

.text-white  {
    color: white;
}

/* 
SELECTORESS AVANZADOS.
*/
.selector-hijos-directos > li {
    background-color: darkcyan;
}

.selector-hijos-descendientes b{
    background-color: darkcyan;
}

/* Las reglas con selectores hermanos solo añaden estilos a los hermanos que estén por debajo del selector
indicado como referencia. */
.selector-hermanos-general ~ li {
    background-color: darkcyan;
}

.selector-hermano-adyacente + li {
    background-color: darkcyan;
}

/* SELECTORES DE ATRIBUTOS. */
.selectores-atributos a[href] {
    color: green;
}

.selectores-atributos a[target="_blank"]{
    font-weight: bold;
}

/* El comodín (*) selecciona a todos los elementos que contengan la palabra especificada
en el atributo indicado. */
.selectores-atributos a[href*="eloquentjavascript"] {
    font-size: 20px;
}

/* El circunflejo (^) selecciona a todos los elementos que contengan la palabra especificada
al INICIO del atributo indicado. */
.selectores-atributos a[href^="http:"] {
    text-decoration: none;
}

/* El signo dolar ($) selecciona a todos los elementos que contengan la palabra especificada
al FINAL del atributo indicado. */
.selectores-atributos a[href$=".net/"] {
    background-color: #000000;
}

/* La virgulilla (~) selecciona a los elementos que contengan la palabra escpecificada dentro
de una lista de palabras separadas en el atributo indicado. */
.selectores-atributos a[class~="link"] {
    background-color: midnightblue;
}

/* La pleca (|) selecciona a los elementos que contengan la palabra especificada y que luego
de ella inmediatamente le siga un guión (-) en el atributo indicado. */
.selectores-atributos a[class|="chapter"] {
    background-color: lightblue;
}

/* 
SELECTOR UNIVERSAL. (*) 
*/
* {
    font-family: sans-serif;
}

.selector-universal *{
    font-size: 20px;
}

/*
PSEUDOCLASES.
Son una serie de palabras especiales que se le añaden a los selectores e indican un estado,
cuando el elemento del selector cumple con dicho estado, se le añaden los estilos especificados. 
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes 
*/

.pseudoclases-estado *:required{
    border-color: yellow;
}


.pseudoclases-estado *:valid{
    border-color: green;
}

.pseudoclases-estado *:invalid{
    border-color: red;
}

.pseudoclases-estado *:focus{
    background-color: skyblue;
}

.pseudoclases-estado *:disabled{
    background-color: lightcyan;
}

/* El orden de las pseudoclases en el código CSS  es importante, pueden solaparse los estilos entre pseudoclases. */
.menu-pseudoclases a:visited {
    color: olive;
}

.menu-pseudoclases a:hover {
    color: orange;
}

.p-pseudoclases-estado:hover {
    font-size: 20px;
}

#temario-css:target {
    border: 5px solid black;
}

/* PSEUDOCLASES DE POSICIÓN. */
.pseudoclases-posicion li:first-child {
    background-color: navy;
    color: whitesmoke;
}


.pseudoclases-posicion li:nth-child(2) {
    background-color: crimson;
}

.pseudoclases-posicion li:nth-child(3n) {
    background-color: khaki;
}

.pseudoclases-posicion li:last-child {
    background-color: olive;
}

.pseudoclases-posicion li:nth-child(2) {
    background-color: crimson;
}

/* PSEUDOCLASES DE TIPO. */
/* La condición de la siguiente regla no se cummple, dado que el first child del elemento
.pseudoclases-tipo no es una p, para estos casos usar pseudoclases de tipo. */
.pseudoclases-tipo p:first-child {
    background-color: crimson;
}

.pseudoclases-tipo p:first-of-type {
    background-color: navy;
    color: whitesmoke;
}

.pseudoclases-tipo div:last-of-type {
    background-color: olive;
}

.pseudoclases-tipo p:nth-of-type(3) {
    background-color: crimson;
}

.pseudoclases-tipo *:not(p, div) {
    background-color: khaki;
}

/* 
LOS PSEUDOELEMENTOS 
añaden estilos a una parte específica de un elemento HTML.
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements 
Los pseudoelementos tienen mayor jerarquia que los elementos comunes. 
*/

.span-pseudoelementos::before {
    content: "Son palabras especiales que ";
}

.span-pseudoelementos::after {
    content: " de un elemento HTML.";
}

.p-pseudoelementos::first-letter {
    font-size: 32px;
}

.p-pseudoelementos::first-line {
    color: midnightbluwe;
}

.p-pseudoelementos::selection {
    background-color: navy;
    color: lightblue;
}

.input-pseudoelementos::placeholder {
    color: green;
}

/* 
AGRUPACIÓN DE SELECTORES. 
*/
.form-agrupacion-selectores input[type="text"],
.form-agrupacion-selectores input[type="email"],
.form-agrupacion-selectores textarea {
    display: block;
    width: 300px;
    background-color: black;
    color: white;
    border: 2px dashed yellow;
    outline: none;
}

/* 
COMBINACIÓN DE SELECTORES
Las combinacion siguientes son solo experimentación. No representa un modelo de escritura idónea en CSS. 
Se considera una mala práctica agregar mas de dos niveles de selectores, dado que eleva el valor de la especificidad.
También se considera mala práctica utilizar los Id como selectores, estos elevan la especificidad en una unidad en el
tercer digito. Evitar en la medida de lo posible.
Si es que de todas formas se incurrirá en la mala práctica de usar un selector de más de dos niveles, usar el siguiente orden:
etiqueta#id.class[attribute]
*/
.form-combinacion-selectores input.input-combinacion-selectores[type="text"]#input-text-combinacion-selectores,
.form-combinacion-selectores .input-combinacion-selectores[type="email"] #input-email-combinacion-selectores,
.form-combinacion-selectores #input-submit-combinacion-selectores[type="submit"].input-combinacion-selectores {
    background-color: black;
    color: whitesmoke;
    display: block;
}

/* Si hay un espaciado que indique que determinado elemento esta dentro de otro, puedo hacer saltos de línea
y seguira aplicando estilos, por el contrario, si en el selector no deberia haber un espaciado obviamente no
aplica los estilos si se hace un salto de linea */
.form-combinacion-selectores 
#input-email-combinacion-selectores[type="email"].input-combinacion-selectores::placeholder {
    color: yellowgreen;
    display: block;
}

.form-combinacion-selectores #input-text-combinacion-selectores[type="text"]
.input-combinacion-selectores::placeholder {
    color: yellowgreen;
}

.form-combinacion-selectores #input-submit-combinacion-selectores[type="submit"].input-combinacion-selectores {
    color: skyblue;
}

/* 
EL ALGORITMO DE CSS
Es la forma en que CSS va aplicando los estilos a un documento HTML en el navegador.
Entender como funciona esto es vital para poder añadir estilos de forma efectiva y comprender
en algunos casos como se sobreescriben las reglas CSS 
1.- La Cascada.
2.- La Especificidad.
3.- La Herencia. 

LA CASCADA
Es el mecanismo de orden por el cual el navegador va aplicando lo estilos,
si un mismo elemento presenta más de un valor para el mismo atributo la cascada
añadirá como estilo el último valor dado a ese atributo, siempre y cuando tengan
el mismo nivel de especificidad. Este mecanismo toma en cuenta lo siguiente, y en
este orden:
1.- Origen del Código.
    -El User Agent (estilos por defecto del navegador).
    -Personalización del Usuario.
    -Los Estilos del Autor (estilos del CSS).
2.-La Especificidad del Selector.
3.-Orden de Aparición.

LA ESPECIFICIDAD
Es el peso que tiene un selector, mientras más alto el peso más prioridad le dará
el algoritmo de CSS a la hora de añadir los estilos de este selector, por sobre estilos
que sean definidos en reglas posteriores ignorando el efecto cascada.
Se calcula de la siguiente manera:
Etiquetas y Pseudoelementos-----------------0,0,0,1
Clases, Atributos y Pseudoclases------------0,0,1,0
Identificadores-----------------------------0,1,0,0
Estilos en línea----------------------------1,0,0,0
!important-------------------Rompe la especificidad

LA HERENCIA
Es la capacidad de un selector ded obtener (heredar) los estilos de su ancestro más cercano,
hay propiedades que se heredan por defecto (tipografias por ejemplo) si no se les da un valor,
y otras que se pueden heredar con el valor inherit.
https://web.dev/learn/css/inheritance/#which-properties-are-inheritable
*/

blockquote#cite-marcus.cite-marcus {
    background-color: crimson;
}
  
blockquote {
    background-color: burlywood;
}

#cite-marcus {
    background-color: oldlace;
}

blockquote.cite-marcus {
    background-color: teal;
}

.cite-marcus {
    background-color: skyblue;
}

.cite-marcus {
    background-color: seagreen !important;
}

blockquote#cite-marcus {
    background-color: steelblue;
}

.cite-marcus {
    background-color: darkorange !important;
    background-color: navy !important;
    color: antiquewhite;
    font-size: 32px;
    border-style: dotted;
    border-color: white;
}

.cite-marcus cite {
    background-color: pink;
    background-color: inherit;
    font-size: 20px;
    font-size: initial;
    border-style: inherit;
    border-color: inherit;
}

/* 
PREFIJOS DE LOS NAVEGADORES
https://autoprefixer.github.io/
https://caniuse.com/
-webkit-user-select: none;
-moz-user-select: none;
-ms-user-select: none;
user-select: none;
*/

